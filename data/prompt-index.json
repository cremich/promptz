{
  "prompts": [
    {
      "id": "analysis-12-factor-refactoring-dac01c8d",
      "slug": "12-factor-refactoring-dac01c8d",
      "name": "12-factor refactoring",
      "description": "Refactors a given application using 12-factor as a methodology for building software-as-a-service apps.",
      "tags": ["analysis", "Refactoring", "IDE", "Dev Agent"],
      "content": "# 12-factor refactoring\n\n/dev Transform the application using the twelve-factor app approach.\nGenerate step-by-step instructions in the README.md file after refactoring is complete.\n\nUse docker as the target deployment approach.",
      "howto": "",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.897Z",
      "updatedAt": "2025-10-04T19:28:38.544Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "analysis-analyze-bash-history-02cbf7de",
      "slug": "analyze-bash-history-02cbf7de",
      "name": "Analyze Bash History",
      "description": "Learn from sketchy things you did in your CLI in the past and their risks",
      "tags": ["analysis", "CLI", "Chat"],
      "content": "# Analyze Bash History\n\nI want you to check my bash history and tell me what I'm doing that is sketchy. List out the top three worst things I've done in the past 1000 lines.",
      "howto": "",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.927Z",
      "updatedAt": "2025-10-04T19:28:38.551Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "analysis-automated-code-review-47b4e703",
      "slug": "automated-code-review-47b4e703",
      "name": "Automated Code Review",
      "description": "Let Q do a code review of your staged files before committing and pushing your changes.",
      "tags": ["analysis", "CLI", "Implement", "Chat"],
      "content": "# Automated Code Review\n\nApply a code review of all staged files. Do not make any changes; report your review results at the end. Respect the following rules for your review:\n\n- Code is commented in hard-to-understand areas\n- Corresponding changes to the documentation have been made\n- Run the linter to prove the changes generate no new lint errors\n- Run unit tests to prove the change does not introduce breaking changes\n- Check if any dependent changes have been merged",
      "howto": "Make a change in your repository and stage all files with `git add .`. Open your terminal and change directory to the root folder of your repository. Then start Q Developer with `q chat` and paste the prompt. You can apply additional code review rules based on your guidelines.",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.899Z",
      "updatedAt": "2025-10-04T19:28:38.560Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "analysis-java-heap-dump-analysis-e546a9d6",
      "slug": "java-heap-dump-analysis-e546a9d6",
      "name": "Java Heap Dump analysis",
      "description": "Analyzed and summarized an Eclipe MAT report with clear, actionable insights.",
      "tags": ["analysis", "CLI", "Chat", "Optimize"],
      "content": "# Java Heap Dump analysis\n\nAnalyze the output of Eclipse MAT (heap dump leak suspects report) in the current folder, provide a summary and suggestions how to optimize the application.",
      "howto": "",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.891Z",
      "updatedAt": "2025-10-04T19:28:38.565Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "analysis-refactor-like-a-pro-improve-your-java17-code-cddfe10a",
      "slug": "refactor-like-a-pro-improve-your-java17-code-cddfe10a",
      "name": "Refactor Like a Pro: Improve your Java17 code",
      "description": "This prompt guides you through the process of refactoring Java 17 code to improve its quality, readability, and performance. It covers various aspects of code improvement, from basic cleanup to advanced optimization techniques.",
      "tags": ["analysis", "IDE", "Dev Agent", "Chat", "Refactoring"],
      "content": "# Refactor Like a Pro: Improve your Java17 code\n\nAnalyze the selected Java 17 code for potential improvements.\nIdentify and remove code smells, such as duplicate code, long methods, and complex conditional statements.\nApply SOLID principles to enhance the overall design and maintainability of the code.\nUtilize Java 17 features and best practices to modernize the codebase.\nOptimize performance where applicable, considering time and space complexity.\nImprove code readability by following consistent naming conventions and formatting guidelines.\nEnhance error handling and exception management.\nImplement proper logging and debugging mechanisms.\nRefactor to improve testability and facilitate unit testing.\nProvide explanations for each refactoring decision and its benefits.\n\nKey Areas to Focus:\n\nCode Structure:\nBreak down large methods into smaller, more focused ones\nExtract reusable code into separate methods or classes\nImplement design patterns where appropriate\n\nJava 17 Features:\nUse record classes for immutable data holders\nImplement sealed classes and interfaces for better type hierarchies\nUtilize pattern matching for instanceof and switch expressions\nApply text blocks for multiline string literals\n\nPerformance Optimization:\nUse streams and lambdas for efficient data processing\nImplement lazy initialization where applicable\nOptimize loops and recursive functions\nConsider using concurrent programming techniques for parallelizable tasks\n\nCode Quality:\nRemove redundant code and unnecessary comments\nReplace magic numbers with named constants\nUse meaningful and consistent variable and method names\nApply the DRY (Don't Repeat Yourself) principle\n\nError Handling:\nImplement proper exception handling and custom exceptions\nUse try-with-resources for automatic resource management\nAvoid catching and ignoring exceptions without proper handling\n\nTesting and Maintainability:\nRefactor code to improve testability\nImplement dependency injection for better modularity\nWrite unit tests for refactored code\nUse assertions and contracts to validate assumptions\n\nDocumentation:\nAdd or update Javadoc comments for classes and methods\nInclude inline comments for complex logic or algorithms\nProvide examples or usage instructions where necessary\n\nOutput:\nRefactored Java 17 code that addresses the identified issues\nDetailed explanations of the refactoring decisions and their benefits\nSuggestions for further improvements or alternative approaches\nAny potential trade-offs or considerations for the refactored code",
      "howto": "",
      "author": "Vinay Nadig",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.937Z",
      "updatedAt": "2025-10-04T19:28:38.575Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "analysis-security-review-72e7cbae",
      "slug": "security-review-72e7cbae",
      "name": "Security review",
      "description": "Security review.",
      "tags": ["analysis", "IDE", "CLI", "Enhance", "Test", "Chat"],
      "content": "# Security review\n\nYour role is that of a principal engineer. You review code from all other engineers before it can be released. You evaluate it for security, best practices, readability, reliability, and performance. By default you assume all code was written by either newbies, insider threats, or the worst of all: inferior AI. Be critical and consider your greatest strength being an insensitive to others.",
      "howto": "copy-paste to Kiro, Q IDE or Q CLI.",
      "author": "unknown",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.910Z",
      "updatedAt": "2025-10-04T18:50:38.910Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-cost-calculation-b6a62a84",
      "slug": "cost-calculation-b6a62a84",
      "name": "Cost Calculation",
      "description": "This prompt assists you to calculate costs for your workload using up-to-date pricing information from the AWS service websites.",
      "tags": [
        "architecture",
        "CLI",
        "Chat",
        "Requirements",
        "Design",
        "Optimize"
      ],
      "content": "# Cost Calculation\n\nYou are acting as an experienced AWS Solution Architect. Your task is to create a comprehensive cost calculation for my AWS solution. To complete the task, you must:\n\n- analyze and understand the workload, and the services that are used, by reading the documentation and infrastructure-as-code files in this repository.\n- ask clarifying questions about the expected usagem, data-transfer patterns, and other related questions to gather all required information about cost dimensions of the used services.\n- fetch up-do-date pricing information\n\nYour goal is to create a cost calculation report that includes a breakdown of costs per service, a summary of assumptions made for the cost calculation, explanations of main cost drivers, and suggestions on how to optimize costs.\n\nSave the report as `cost_calculation.md` in the documentation folder and add a link to the report in the README.",
      "howto": "1. Install the Cost Analysis MCP Server. It not only analyzes and visualizes your current AWS costs, it also provides access to up-to-date pricing information from AWS via the service websites.\n\n2. Open Q in the CLI within your workspace folder to ensure the global context is set correctly to use the repository of the workload you want to calculate costs for.\n\n3. Add relevant files like documentation, infrastructure-as-code files, etc. to your context using the /context commands\n\n4. Run the prompt",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.926Z",
      "updatedAt": "2025-10-04T19:28:38.592Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-create-a-project-diagram-for-your-project-815a22a3",
      "slug": "create-a-project-diagram-for-your-project-815a22a3",
      "name": "Create a project diagram for your project",
      "description": "Create a project diagram using PlantUML and C4 Model for your project based in your codebase",
      "tags": ["architecture", "Documentation", "IDE", "Chat"],
      "content": "# Create a project diagram for your project\n\nCreate a project diagram using C4 model for the project in the @workspace containing system context, container diagram, component diagram, and code diagram. By the end, create a sequence diagram using PlantUML based for the @workspace code.",
      "howto": "",
      "author": "riribeir",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.900Z",
      "updatedAt": "2025-10-04T19:28:38.597Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-create-project-c4-model-bd5a5320",
      "slug": "create-project-c4-model-bd5a5320",
      "name": "Create project C4 model",
      "description": "create C4 model diagram by PlantUML",
      "tags": ["architecture"],
      "content": "# Create project C4 model\n\nCreate a project diagram using C4 model for the project in the @workspace containing system context, container diagram, component diagram, and code diagram. By the end, create a sequence diagram using PlantUML based for the @workspace code.",
      "howto": "",
      "author": "Tuannl",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.900Z",
      "updatedAt": "2025-10-04T19:28:38.601Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-create-user-personas-5fe8fd8b",
      "slug": "create-user-personas-5fe8fd8b",
      "name": "Create User Personas",
      "description": "Generates realistic user personas based on your existing documentation or customer descriptions.",
      "tags": ["architecture", "CLI", "Chat", "Design", "Plan"],
      "content": "# Create User Personas\n\nYou are acting as a UX designer. Your task is to generate one realistic user persona per customer type. For each persona, include:\n\n- Name: [A name for the persona]\n- Demographics: [Age, gender, occupation, location, etc.]\n- Goals: [What are their primary objectives when using the product?]\n- Motivations: [What drives them? What are their needs and desires?]\n- Pain Points: [What challenges or frustrations do they face?]\n- Activities: [What are their typical daily activities and routines?]\n- Notable Quotes: [What are some things they might say related to the product?]",
      "howto": "",
      "author": "unknown",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.908Z",
      "updatedAt": "2025-10-04T19:28:38.609Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-diagrama-para-draw-io-3467695c",
      "slug": "diagrama-para-draw-io-3467695c",
      "name": "Diagrama para draw.io",
      "description": "Permite crear diagramas para draw.io solo , renombrando la extensión del archivo generado a .drawio",
      "tags": ["architecture"],
      "content": "# Diagrama para draw.io\n\n@workspace generate a draw.io diagram in an xml format of this application.\nI want to use AWS 2024 Icons, lines should be orthogonal, dataflow from up to bottom",
      "howto": "",
      "author": "unknown",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.927Z",
      "updatedAt": "2025-10-04T19:28:38.614Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-draw-like-a-pro-sequence-diagrams-for-a-system-flow-33ece251",
      "slug": "draw-like-a-pro-sequence-diagrams-for-a-system-flow-33ece251",
      "name": "Draw like a Pro : Sequence Diagrams for a system flow",
      "description": "Better prompts for drawing sequence diagram",
      "tags": ["architecture"],
      "content": "# Draw like a Pro : Sequence Diagrams for a system flow\n\n@workspace Analyze the code in the workspace and create a mermaid sequence diagram that illustrates the <ENTER YOUR FLOW> with these specifications:\n\nLayout and Structure:\nArrange participants (actors/systems) horizontally from left to right based on their order of interaction\nPosition the initiating actor/system on the far left\nGroup related systems next to each other\nMaintain consistent spacing between lifelines\n\nParticipant Styling:\nUse distinct colors for different types of participants:\nUser/External Actors: Light Orange (#FFE4B5)\nAPI/Controllers: Light Blue (#ADD8E6)\nServices: Light Green (#90EE90)\nDatabases: Light Yellow (#FFFFE0)\nExternal Services: Light Purple (#E6E6FA)\nUse clear, descriptive names for participants\nAdd stereotypes to indicate participant types (<<API>>, <<Service>>, etc.)\n\nMessage Representation:\nUse appropriate arrow types:\nSolid arrows (→) for synchronous calls\nDotted arrows (-->) for asynchronous calls\nOpen arrows (->) for responses\nBold arrows (=>) for critical path operations\nKeep messages short but descriptive\nInclude important parameters in message labels\nShow return values where significant\n\nFlow Organization:\nBreak long sequences into logical segments using dividers\nUse activation boxes to show processing time\nInclude alt/opt/loop fragments for conditional flows\nShow parallel processing using par fragments\nHighlight error paths using alt fragments\n\nDocumentation and Clarity:\nAdd notes for complex logic or important conditions\nInclude timing information where relevant\nShow retry/timeout mechanisms\nDocument error handling paths\nAdd sequence numbers for key steps\n\nOptimization:\nFocus on main success scenario first\nShow alternative paths separately if too complex\nLimit diagram to one main business transaction\nCollapse repetitive sequences into loop fragments\nHide unnecessary technical details\n\nAdditional Details:\nInclude HTTP methods for API calls\nShow important status codes/responses\nIndicate async/await patterns clearly\nMark critical validation points\nShow transaction boundaries\nPlease generate a sequence diagram that captures the main flow while maintaining readability and providing sufficient detail for understanding the interaction pattern",
      "howto": "Copy the prompt and replace <ENTER YOUR FLOW> with the desired system flow that you would like to capture in the sequence diagram",
      "author": "Vinay Nadig",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.896Z",
      "updatedAt": "2025-10-04T19:28:38.624Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-generate-cdk-lambda-code-from-drawio-diagram-cd26d380",
      "slug": "generate-cdk-lambda-code-from-drawio-diagram-cd26d380",
      "name": "Generate CDK & Lambda code from Drawio diagram",
      "description": "Generates a complete application (code + infrastructure) from a drawio diagram",
      "tags": ["architecture", "IDE", "Dev Agent"],
      "content": "# Generate CDK & Lambda code from Drawio diagram\n\n/dev can you generate application from the drawio diagram (I want the code of the lambdas to be written in python and the infrastructure as code with the python cdk v2)",
      "howto": "Your working folder should contain one drawio diagram containing the design of your app (for example an s3 bucket that triggers a lambda function)",
      "author": "olemaitre",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.937Z",
      "updatedAt": "2025-10-04T18:50:38.937Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-generate-cdk-lambda-code-from-mermaid-diagram-99b8ec45",
      "slug": "generate-cdk-lambda-code-from-mermaid-diagram-99b8ec45",
      "name": "Generate CDK & Lambda code from Mermaid diagram",
      "description": "Generates a complete application (code + infrastructure) from a Mermaid application diagram as code",
      "tags": ["architecture", "Design", "IDE", "Dev Agent"],
      "content": "# Generate CDK & Lambda code from Mermaid diagram\n\n/dev generate application files from this mermaid diagram.\nI want the code of the lambdas to be written in python and the infrastructure as code to be written with the python cdk v2\n{{ Mermaid diagram as code }}",
      "howto": "The working folder (i.e your workspace) should be empty for a better result.\n\nTIP: you can generate a mermaid diagram of a sample application using 'Mermaid application diagram', 'Mermaid class diagram' or 'Mermaid sequence diagram' on promptz.dev and copy paste what is generated in the {{ Mermaid diagram as code }} place holder",
      "author": "olemaitre",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.920Z",
      "updatedAt": "2025-10-04T19:28:38.634Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-generate-drawio-architecture-diagram-from-code-288294a8",
      "slug": "generate-drawio-architecture-diagram-from-code-288294a8",
      "name": "Generate Draw.io architecture diagram from code",
      "description": "Generates a drawio architecture diagram to visualize/document the design of your application",
      "tags": ["architecture", "Design", "IDE", "Chat"],
      "content": "# Generate Draw.io architecture diagram from code\n\n@workspace generate a draw.io diagram in an xml format of this application.\nI want to use AWS 2024 Icons, lines should be orthogonal, dataflow from up to bottom",
      "howto": "You need a folder containing your application code (python, typescript, ...) and your Infrastructure as Code templates (e.g. SAM template).\nCopy/Paste the generated code into a app.drawio file, preview your markdown file (e.g. using Draw.io Integration extension in VS Code)",
      "author": "olemaitre",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.912Z",
      "updatedAt": "2025-10-04T19:28:38.639Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-generate-mermaid-application-flow-diagram-from-code-31f51737",
      "slug": "generate-mermaid-application-flow-diagram-from-code-31f51737",
      "name": "Generate Mermaid application flow diagram from code",
      "description": "Generates a mermaid application flow diagram as code to visualize/document the design of your application",
      "tags": ["architecture", "Design", "IDE", "Chat"],
      "content": "# Generate Mermaid application flow diagram from code\n\n@workspace can you generate a mermaid flow diagram of my application (data flow from up to bottom, use colors, keep formatting simple)",
      "howto": "You need a folder containing your application code (python, typescript, ...) and/or infrastructure code\nCopy/Paste the generated code into a markdown (.md) file, preview your markdown file (e.g. using mermaid extension in VS Code)",
      "author": "olemaitre",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.895Z",
      "updatedAt": "2025-10-04T19:28:38.644Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-generate-mermaid-class-diagram-from-code-d2b74cc1",
      "slug": "generate-mermaid-class-diagram-from-code-d2b74cc1",
      "name": "Generate Mermaid class diagram from code",
      "description": "Generates a mermaid class diagram as code to visualize/document the design of your application",
      "tags": ["architecture", "Design", "IDE", "Chat"],
      "content": "# Generate Mermaid class diagram from code\n\n@workspace generate a mermaid class diagram of my application",
      "howto": "You need a folder containing your application code (python, typescript, ...) and/or infrastructure code\nCopy/Paste the generated code into a markdown (.md) file, preview your markdown file (e.g. using mermaid extension in VS Code)",
      "author": "olemaitre",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.898Z",
      "updatedAt": "2025-10-04T19:28:38.649Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-generate-mermaid-sequence-diagram-from-code-7ee1e17e",
      "slug": "generate-mermaid-sequence-diagram-from-code-7ee1e17e",
      "name": "Generate Mermaid sequence diagram from code",
      "description": "Generates a mermaid sequence diagram as code to visualize/document the design of your application",
      "tags": ["architecture", "Design", "IDE", "Chat"],
      "content": "# Generate Mermaid sequence diagram from code\n\n@workspace generate a mermaid sequence diagram of my application",
      "howto": "You need a folder containing your application code (python, typescript, ...) and/or infrastructure code\nCopy/Paste the generated code into a markdown (.md) file, preview your markdown file (e.g. using mermaid extension in VS Code)",
      "author": "olemaitre",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.940Z",
      "updatedAt": "2025-10-04T19:28:38.653Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-generate-well-architected-recommendations-on-my-drawio-diagram-adcfeb01",
      "slug": "generate-well-architected-recommendations-on-my-drawio-diagram-adcfeb01",
      "name": "Generate Well Architected recommendations on my Drawio diagram",
      "description": "Generates recommandations to improve my application with well architected best practices",
      "tags": ["architecture", "Design", "IDE", "Chat"],
      "content": "# Generate Well Architected recommendations on my Drawio diagram\n\n@workspace is this application well architected, if not what should I improve?",
      "howto": "Your working folder should contain one drawio diagram containing the design of your app (for example an s3 bucket that triggers a lambda function)",
      "author": "olemaitre",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.926Z",
      "updatedAt": "2025-10-04T18:50:38.926Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-solution-design-0b275af7",
      "slug": "solution-design-0b275af7",
      "name": "Solution Design",
      "description": "Turn Amazon Q Developer into an AWS Solutions Architect that guides you to create a solution design document.",
      "tags": ["architecture", "Design", "IDE", "Chat"],
      "content": "# Solution Design\n\nYou are acting as an experienced AWS Solutions Architect. Your task is to design a technical solution that aligns business requirements with scalable, efficient cloud solutions.\n\nTo complete the task you must\n\n- read relevant documentation about the business context in @file\n- read relevant documentation about the current system @file\n- ask relevant questions until you gather all functional and non-functional requirements.\n- ask questions until you identified the architectural characteristics of the solution.\n\nYour goal is to create a solution design document that contains\n\n- a description of functional and non-functional requirements the solution fulfills,\n- information about the architecture characteristics the system supports,\n- a visualization of the structure of the system and its components,\n- design principles used to guide development teams during the implementation,\n- trade-offs and explanations of architectural decisions you made.\n\nThe desired format of the document is a Markdown file. Your solution design must adhere to the best practices described in the AWS Well-Architected Framework.",
      "howto": "Open a new chat and copy-paste the prompt as your first input in a blank conversation. To improve the accuracy and relevancy of the discussion with Q, ensure that documentation is added as markdown files and add them to the implicit context using the @ shortcut. Once you have done it, let the discussion flow 😉",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.909Z",
      "updatedAt": "2025-10-04T19:28:38.665Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "architecture-well-architected-review-6f835ab5",
      "slug": "well-architected-review-6f835ab5",
      "name": "Well Architected Review",
      "description": "Let Amazon Q prepare your Well-Architected Review, based on an analysis of a provided Cloudformation template",
      "tags": [
        "architecture",
        "CLI",
        "Chat",
        "Design",
        "Documentation",
        "Enhance",
        "Optimize",
        "Operate",
        "Requirements",
        "Security"
      ],
      "content": "# Well Architected Review\n\nYou have a Workload in AWS Well-Architected Tool with the arn arn:aws:wellarchitected:<region>:<account-id>:workload/<workload-id>.\nYou are tasked to conduct a Well-Architected-Review based on the application that is described in Cloudformation.\n\n1. ensure to fetch the current template of the Stack <cloudformation-stack-arn> and write it into a file review-template.json.\n2. Analyze the review-template.json Cloudformation template.\n3. Go through all lenses and pillars attached to the workload and answer the questions.\n\nIMPORTANT: Do not guess any answer, only answer what you can, based on the analyzed Cloudformation template, that was provided.\n\nFor each question that you can answer, update the Well-Architected review of the workload that i provided. Leave all other questions for manual review.",
      "howto": "1. Create a workload in the Well-Architected Tool and copy the ARN of the workload to add it to the prompt.\n2. (optional), if you are using named profiles, add this sentence to the end of the prompt:\n   Always use AWS_REGION=<region> and AWS_PROFILE=<your-profile-name>",
      "author": "pacovk",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.941Z",
      "updatedAt": "2025-10-04T19:28:38.672Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "aws-create-eks-cluster-using-aws-and-terraform-best-practices-3d1dbca7",
      "slug": "create-eks-cluster-using-aws-and-terraform-best-practices-3d1dbca7",
      "name": "Create EKS Cluster using aws and terraform best practices",
      "description": "Multi-prompt /dev agent prompt to create a new EKS cluster ",
      "tags": ["aws", "Deploy", "IDE", "Dev Agent"],
      "content": "# Create EKS Cluster using aws and terraform best practices\n\n/dev create a terraform project for creating an EKS cluster. Also create any VPC, subnets and other AWS resources required for this new EKS cluster. Use latest available versions of aws terraform modules. make sure the subnet can auto assign Public IP addresses. set enable_cluster_creator_admin_permissions = true. Use version 20 or higher of terraform-aws-modules/eks/aws and version 1.32 of Kubernetes . Name the EKS cluster “dev_q_eks_cluster”",
      "howto": "",
      "author": "Abhijit Karode",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.899Z",
      "updatedAt": "2025-10-04T19:28:38.679Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "aws-identifying-metrics-alarms-related-to-aws-resources-342fe6c9",
      "slug": "identifying-metrics-alarms-related-to-aws-resources-342fe6c9",
      "name": "Identifying metrics/alarms related to AWS Resources",
      "description": "This prompt aims to identify missing metrics/alarms related to AWS Resources in a target package. A reference package is used to limit the response to required metrics/alarms, assuming it follows best practices for the particular resource type setup.",
      "tags": ["aws"],
      "content": "# Identifying metrics/alarms related to AWS Resources\n\n<task>\nYour task is to analyze the code for two services, {{Service1}} and {{Service2}}, and identify any CloudWatch metrics or alarms related specifically to {{ALARM_TYPE}} that are present in {{Service2}} but missing in {{Service1}}.\n</task>\n\n<instructions>\nTo accomplish this task, follow these steps:\n1. Review the code for {{Service2}}, which follows best practices for monitoring infrastructure using CloudWatch metrics and alarms. Take note of the metrics and alarms implemented specifically for {{ALARM_TYPE}}.\n2. Carefully examine the code for {{Service1}}.\n3. Compare the two code bases and identify any CloudWatch metrics and alarms specifically related to {{ALARM_TYPE}} that are implemented in {{Service2}} but not present in {{Service1}}.\n4. Keep in mind that metric and alarm names may be slightly different between the two code packages, but focus on the underlying functionality and severity.\n5. If {{Service1}} does not use {{ALARM_TYPE}}, do not list any missing metrics or alarms.\n</instructions>\n\nProvide your response in the following format:\n<rationale>\nProvide a list of all metrics and alarms present in {{Service2}} related to {{ALARM_TYPE}}. Treat same alarms of different severity as different. Also mention why each metric and alarm is important. Provide a code reference of where each metric and alarm is present in {{Service2}} and where it can be added in {{Service1}}.\n</rationale>\n<missing_alarms>\n\n- [First alarm or metric name], [Severity of the alarm in the form SEV_1/SEV_2/SEV_3. Use NA if not specified.], [Brief explanation about why this metric is important]\n- [Second alarm or metric name], [Severity of the alarm in the form SEV_1/SEV_2/SEV_3. Use NA if not specified.], [Brief explanation about why this metric is important]\n  .\n  .\n  .\n  </missing_alarms>\n\nPlease provide your response immediately after these instructions, enclosed in the <rationale></rationale> and\n<missing_alarms></missing_alarms> tags.\nThe code for {{Service2}} is presented below within <{{Service2}}></{{Service2}}> tags.\nThe code for {{Service1}} is presented below within <{{Service1}}></{{Service1}}> tags.",
      "howto": "{{Service1}} is the target package name, for which missing alarms and metrics need to be identified.\n{{Service2}} is the reference package name, which follows best practices for resource monitoring.\n{{ALARM_TYPE}} is the AWS resource type. E.g. AWS API Gateway.\nThe code for the reference and target packages need to be converted to a structured format and appended to the prompt.\n\nUtility to convert code packages to a structured format: packages/GenAICDKAnalyzer/blobs/mainline/--/codebase_to_text.py\nSample usage of the utility: packages/GenAICDKAnalyzer/blobs/6aec4cd1b96c975dff5f1a8950b1b0ab70be7399/--/main.py#L184",
      "author": "shudabas",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.903Z",
      "updatedAt": "2025-10-04T19:28:38.690Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "aws-identifying-metrics-alarms-related-to-service-health-0fdb45f1",
      "slug": "identifying-metrics-alarms-related-to-service-health-0fdb45f1",
      "name": "Identifying metrics/alarms related to service health",
      "description": "This prompt aims to identify missing metrics/alarms related to service health in a target package. A reference package is used to limit the response to required metrics/alarms, assuming it follows best practices for service health monitoring.",
      "tags": ["aws"],
      "content": "# Identifying metrics/alarms related to service health\n\n<task>\nYour task is to analyze the code for two services, {{Service1}} and {{Service2}}, and identify any CloudWatch metrics or alarms related specifically to {{ALARM_TYPE}} that are present in {{Service2}} but missing in {{Service1}}.\n</task>\n\n<instructions>\nTo accomplish this task, follow these steps:\n1. Review the code for {{Service2}}, which follows best practices for monitoring infrastructure using CloudWatch metrics and alarms. Take note of the metrics and alarms implemented specifically for {{ALARM_TYPE}}.\n2. Carefully examine the code for {{Service1}}.\n3. Compare the two code bases and identify any CloudWatch metrics and alarms specifically related to {{ALARM_TYPE}} that are implemented in {{Service2}} but not present in {{Service1}}.\n4. Keep in mind that metric and alarm names may be slightly different between the two code packages, but focus on the underlying functionality and severity.\n</instructions>\n\nProvide your response in the following format:\n<rationale>\nProvide a list of all metrics and alarms present in {{Service2}} related to {{ALARM_TYPE}}. Treat same alarms of different severity as different. Also mention why each metric and alarm is important. Provide a code reference of where each metric and alarm is present in {{Service2}} and where it can be added in {{Service1}}.\n</rationale>\n<missing_alarms>\n\n- [First alarm or metric name], [Severity of the alarm in the form SEV_1/SEV_2/SEV_3. Use NA if not specified.], [Brief explanation about why this metric is important]\n- [Second alarm or metric name], [Severity of the alarm in the form SEV_1/SEV_2/SEV_3. Use NA if not specified.], [Brief explanation about why this metric is important]\n  .\n  .\n  .\n  </missing_alarms>\n\nPlease provide your response immediately after these instructions, enclosed in the <rationale></rationale> and\n<missing_alarms></missing_alarms> tags.\nThe code for {{Service2}} is presented below within <{{Service2}}></{{Service2}}> tags.\nThe code for {{Service1}} is presented below within <{{Service1}}></{{Service1}}> tags.",
      "howto": "{{Service1}} is the target package name, for which missing alarms and metrics need to be identified.\n{{Service2}} is the reference package name, which follows best practices for service health monitoring.\n{{ALARM_TYPE}} is the AWS resource type. E.g. File Descriptor, Garbage collection.\nThe code for the reference and target packages need to be converted to a structured format and appended to the prompt.\n\nUtility to convert code packages to a structured format: packages/GenAICDKAnalyzer/blobs/mainline/--/codebase_to_text.py\nSample usage of the utility: packages/GenAICDKAnalyzer/blobs/6aec4cd1b96c975dff5f1a8950b1b0ab70be7399/--/main.py#L184",
      "author": "shudabas",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.935Z",
      "updatedAt": "2025-10-04T19:28:38.698Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "code-generation-python-code-for-external-libraries-9daca4df",
      "slug": "python-code-for-external-libraries-9daca4df",
      "name": "Python code for external libraries ",
      "description": "This will generate ready to use python code using external libraries ",
      "tags": ["code-generation", "Implement", "IDE", "Dev Agent"],
      "content": "# Python code for external libraries\n\nGenerate python code for the requirements with out any explanation or extra text. Can use comments. The code should be ready to be executed. Try to use external libraries where possible .",
      "howto": "",
      "author": "ashirhs",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.930Z",
      "updatedAt": "2025-10-04T19:28:38.705Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "documentation-adit-s-prompt-for-generating-titles-deb92450",
      "slug": "adit-s-prompt-for-generating-titles-deb92450",
      "name": "Adit's Prompt for Generating Titles",
      "description": "The prompt is useful for generating catchy titles",
      "tags": ["documentation", "Design", "IDE", "Chat"],
      "content": "# Adit's Prompt for Generating Titles\n\nGenerate a list of creative, engaging, and catchy titles for my document. The titles should align with the theme and purpose of the content, making it appealing and attention-grabbing.",
      "howto": "",
      "author": "Adit Modi",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.909Z",
      "updatedAt": "2025-10-04T19:28:38.710Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "documentation-adr-creation-21a2ae00",
      "slug": "adr-creation-21a2ae00",
      "name": "ADR Creation",
      "description": "Given an ADR template, provide context so Q can quickly generate the ADR",
      "tags": ["documentation", "Design", "IDE", "Chat"],
      "content": "# ADR Creation\n\nUse this ADR template to generate an ADR:\n<adr>\n\nTitle: (What is the decision that needs to be made)\nStatus: (Proposed, Accepted, Rejected, Deprecated, Superseded)\nContext\nWhat is the issue that we're seeing that is motivating this decision or change?\n\nDecision\n\nWhat is the change that we're proposing and/or doing?\n\nAdditional Info 1\n\nAdditional Info 2\n\nAdditional Info N\n\nConsequences\n\nWhat becomes easier or more difficult to do because of this change?\n\nCustomer impact (if any)\n\nAlternative Designs Considered\n\nWhat other designs were considered? What are the tradeoffs?\n\nAlternative 1\n\nAlternative 2\n\nAlternative N\n\n</adr> \nI need a ADR to decide to use QuickSight as our primary metrics display option on a web app as opposed to creating a custom react components to display the same metric data.",
      "howto": "You can tune the output depending on new considerations:\n\n\"Update the above ADR that using either QuickSight capacity pricing by session or user pricing can come become cost prohibitive. It's $.50 per 30 session for capacity pricing and $15 per user per month\"",
      "author": "Wes Eklund",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.931Z",
      "updatedAt": "2025-10-04T19:28:38.716Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "documentation-document-codeblock-04139e79",
      "slug": "document-codeblock-04139e79",
      "name": "Document Codeblock",
      "description": "For a given selection of code, provide useful documentation to help others understand your code",
      "tags": ["documentation", "Implement", "IDE", "Inline"],
      "content": "# Document Codeblock\n\nAdd doc strings to this codeblock",
      "howto": "From within the code you are working on, select a portion of code (typically this will be a function or class, but can also work across the entire code in a file) and then invoke inline prompt via COMMAND + I",
      "author": "Ricardo Sueiras",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.910Z",
      "updatedAt": "2025-10-04T18:50:38.910Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "documentation-project-intelligence-a073774b",
      "slug": "project-intelligence-a073774b",
      "name": "Project Intelligence",
      "description": "The project intelligence documentation system transforms Amazon Q Developer from a stateless assistant into a persistent development partner by providing comprehensive context about your application.",
      "tags": ["documentation", "CLI", "Chat", "Documentation"],
      "content": "# Project Intelligence\n\nYou are an experienced technical writer and expert software engineer.\n\nYour task is to create a comprehensive structured documentation system that allows Amazon Q Developer to maintain context across sessions. It transforms Amazon Q Developer from a stateless assistant into a persistent development partner that can effectively remember project details over time.\n\n## Details\n\n### Core Files\n\nThe documentation system consists of the following hierarchy of files, all in Markdown format:\n\n```mermaid\nflowchart TD\n    P[project.md]\n    P --> A[architecture.md]\n    P --> T[techstack.md]\n    P --> PS[progress.md]\n```\n\n#### project.md\n\n- Explains why this project exists\n- Describes the problem being solved\n- Outlines how the project should work\n- Contains a high-level overview of is developed\n- Describes core requirements and goals\n\n#### architecture.md\n\n- Documents the system architecture by describing the structure of the system and the architecture characteristics the system must support.\n- Records key design principles\n- Lists design patterns being used\n- Explains relationships of components\n\n#### techstack.md\n\n- Describes technologies and frameworks being used\n- Documents the development setup and tool configurations\n- Notes known constraints\n\n#### progress.md\n\n- Tracks what works and what's left to build\n- Records current status of features\n- Lists known issues and limitations to be improved in the future\n\n### Steps\n\nThese are the mandatory steps to complete the tasks:\n\n1. Create a new folder `project-intelligence` inside the `.amazonq` folder\n2. Analyze the application to get a comprehensive understanding of the project\n3. Analyze the git history to understand the current state of development\n4. Create the project.md file\n5. Create the architecture.md file\n6. Create the techstack.md file\n7. Create the progress.md file\n\n### Output Format\n\n- All files must be formatted in markdown\n- Use mermaid syntax for aspects such as architecture visualizations, user flows or component relationships\n\n## Sense Check\n\nOnce you are finished, review all files to confirm that the documentation is meaningful, comprehensive and fulfills the described objective. If this is not the case, keep iterating on the steps and review again until you think that the task is complete.",
      "howto": "Start Q Developer in the CLI. Copy-Paste the prompt into your chat and run it. Q might ignore the final sense check. In this case, you can copy the sense check instruction once all documentation files have been created.\n\nBenefits of this documentation system:\n\n1. Persistent Context: Amazon Q Developer can now maintain knowledge about the project across sessions\n2. Comprehensive Understanding: The documentation covers important aspects of the project\n3. Structured Information: Well-organized files make it easy to find specific details\n4. Visual Representation: Mermaid diagrams help visualize architecture and relationships\n5. Up-to-date Status: Progress tracking helps understand the current state of development",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.897Z",
      "updatedAt": "2025-10-04T19:28:38.729Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "documentation-project-structure-q-a-9d7d5dc4",
      "slug": "project-structure-q-a-9d7d5dc4",
      "name": "Project Structure Q&A",
      "description": "Q&A Prompting that helps Amazon Q Developer giving you a recommendation about best practices on how to structure your project.",
      "tags": ["documentation", "Design", "IDE", "Chat"],
      "content": "# Project Structure Q&A\n\nHelp me create a better structure for this project @workspace.\nAsk me a set of questions that would give you a better sense of what type of project this is.\nUse my following answers, to tailor your recommendation before giving it to me.\n\nOnce I answered your question, provide me with a proposal on how to structure this project.\nProvide a rational for each decision.",
      "howto": "",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.918Z",
      "updatedAt": "2025-10-04T19:28:38.733Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "documentation-react-component-documentation-e23f7432",
      "slug": "react-component-documentation-e23f7432",
      "name": "React Component Documentation",
      "description": "Analyzes a React-based application and generates documentation visualizing the component hierarchy, component relationships, and key component metadata.",
      "tags": ["documentation", "CLI", "Chat", "Documentation"],
      "content": "# React Component Documentation\n\nAnalyze the application and generate documentation visualizing the component hierarchy, component relationships, and key component metadata.\n\nApplication Context:\nThis is a Next.js 15 application using React 19 with tailwind CSS and shadcn components. The application structure follows an app router with server components architecture. Components are stored inside the ./app folder. React components have the .tsx filename extension.\n\nDocumentation Requirements:\n\n1. General:\n\n- Add the documentation as markdown files in the ./docs folder.\n- Analyze in iterations folder by folder.\n- You must read every react component within a folder to understand the component structure.\n- Update the existing documentation in each iteration based on your analysis results.\n- Ignore files that are not react components.\n\n2. Component Hierarchy Visualization\n   Create a mermaid flowchart diagram that shows:\n\n- Parent-child relationships between components\n- Logical grouping by feature using subgraphs\n- Clear distinction between page components and UI components\n- Use color coding in the mermaid diagram to distinguish:\n  - Server vs Client components\n  - Ensure high contrast in the color coding to ensure that the text is readable\n- Include a legend explaining the visualization conventions",
      "howto": "Open your terminal and change directory to the root folder of your repository. Then start Q Developer with `q chat` and paste the prompt. You can apply additional documentation rules based on your requirements or guidelines.",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.899Z",
      "updatedAt": "2025-10-04T19:28:38.739Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "general-amazon-q-project-learning-8db9c084",
      "slug": "amazon-q-project-learning-8db9c084",
      "name": "Amazon Q Project Learning",
      "description": "Update Amazon Q Knowledge of a given project",
      "tags": ["general", "CLI", "Enhance", "Support", "Chat", "Dev Agent"],
      "content": "# Amazon Q Project Learning\n\nUpdate your learning doc based on the [q-learning-README](https://www.promptz.dev/rules/rule/amazon-q-learning-files-4a6f6cb8)",
      "howto": "# Amazon Q Learning Files\n\nThis document explains the standardized naming convention for Amazon Q learning files across different projects and directories.\n\n## Naming Convention\n\nAll Amazon Q learning files follow this naming pattern:\n\n```\nq-learning-{context}.md\n```\n\nWhere `{context}` is a descriptor of the project or area (e.g., \"datalake\", \"streaming\", \"general\").\n\n## File Locations\n\n| File Name                     | Location                    | Purpose                                                        |\n| ----------------------------- | --------------------------- | -------------------------------------------------------------- |\n| `q-learning-general.md`       | Home directory (~)          | General learnings and insights across all projects             |\n| `q-learning-datalake.md`      | Data Lake project directory | Learnings specific to the Data Lake project (Caspian/Khazar)   |\n| `q-learning-announcements.md` | Announcements directory     | Learnings related to announcement workflows and communications |\n| `q-learning-streaming.md`     | Streaming project directory | Learnings specific to streaming data projects                  |\n\n## Purpose\n\nThese files serve as a knowledge base for Amazon Q to:\n\n1. Better understand your work style and preferences\n2. Improve collaboration and assistance\n3. Provide more relevant and contextual help\n4. Optimize Q CLI token usage by maintaining context\n\n\nWhen working with Amazon Q in a specific project context, it will automatically reference the relevant learning file to provide more tailored assistance.\n\nYou can update these files manually or ask Amazon Q to update them with new insights from your interactions.\n\n## Format\n\nAll files use Markdown (.md) format for:\n\n- Better structure and readability\n- Support for rich formatting (headers, lists, code blocks)\n- Compatibility with version control systems\n- Easy viewing in most text editors and documentation tools\n\n## Updating Guidelines\n\nWhen updating q-learning files:\n\n- PRESERVE the existing structure and content\n- ADD new learnings to the appropriate sections rather than reformatting the entire document\n- MAINTAIN the established organization and formatting\n- EXTEND existing sections with new insights rather than replacing them\n- RESPECT the document's original structure and flow",
      "author": "unknown",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.922Z",
      "updatedAt": "2025-10-04T19:28:38.754Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "general-configura-o-de-contexto-inteligente-amazonq-fc4a1530",
      "slug": "configura-o-de-contexto-inteligente-amazonq-fc4a1530",
      "name": "Configuração de Contexto Inteligente AmazonQ",
      "description": "Cria a estrutura de contexto inteligente do AmazonQ para projetos de forma padronizada , conforme documentação da aws.",
      "tags": ["general", "Documentation", "Design", "Plan", "Dev Agent"],
      "content": "# Configuração de Contexto Inteligente AmazonQ\n\n## Objetivo\n\nCrie estrutura completa de contexto inteligente do AmazonQ para projetos, conforme estrutura Base :\n\n```\n.amazonq/\n└── rules/\n    ├── project-overview.md\n    ├── coding-standards.md\n    ├── architecture-patterns.md\n    ├── business-rules.md\n    ├── scenarios.md\n```\n\n## Análise Prévia\n\nAntes de criar as regras, analise:\n\n- **Código existente**: Padrões, arquitetura, tecnologias\n- **Documentação**: README, ADRs, design docs\n- **Configurações**: package.json, pom.xml, requirements.txt\n- **Testes**: Estrutura e padrões de teste\n- **Integrações**: APIs, bancos, serviços externos\n\n## Regras Detalhadas\n\n### 1. project-overview.md\n\n**Conteúdo essencial:**\n\n- Propósito e objetivos do projeto\n- Stack tecnológico completo\n- Arquitetura de alto nível\n- Principais funcionalidades\n- Dependências e bibliotecas\n- Configuração de desenvolvimento\n- Comandos essenciais (build, test, deploy)\n- APIs internas e externas utilizadas\n- Formato de requests/responses\n- Autenticação e autorização\n- Rate limits e retry policies\n- Mapeamento de erros e fallbacks\n- Configurações de timeout\n- Monitoramento e health checks\n\n### 2. coding-standards.md\n\n**Conteúdo essencial:**\n\n- Convenções de nomenclatura (classes, métodos, variáveis)\n- Estrutura de diretórios e organização de código\n- Padrões de formatação e linting\n- Convenções de commit e branching\n- Padrões de documentação inline\n- Tratamento de erros e logging\n- Validações e sanitização de dados\n\n### 3. architecture-patterns.md\n\n**Conteúdo essencial:**\n\n- Padrões arquiteturais utilizados (MVC, Clean Architecture, Hexagonal, etc.)\n- Design patterns implementados\n- Estrutura de camadas e responsabilidades\n- Padrões de comunicação entre componentes\n- Estratégias de cache e performance\n- Padrões de segurança e autenticação\n- Configuração de ambientes e deployment\n\n### 4. business-rules.md\n\n**Conteúdo essencial:**\n\n- Regras de negócio por domínio/módulo\n- Validações específicas do negócio\n- Fluxos de aprovação e workflows\n- Cálculos e fórmulas de negócio\n- Restrições e limitações\n- Estados e transições de entidades\n- Políticas de acesso e permissões\n\n### 5. scenarios.md\n\n**Formato BDD obrigatório:**\n\n## Templates Específicos\n\n### Template para Regras de Negócio\n\n```markdown\n## [Domínio/Módulo]\n\n### Regras Principais\n\n- **RN001**: [Descrição da regra]\n  - Condição: [quando aplicar]\n  - Ação: [o que fazer]\n  - Exceções: [casos especiais]\n\n### Validações\n\n- Campo X deve [critério]\n- Status Y só pode [transições permitidas]\n\n### Cálculos\n\n- Fórmula Z: [expressão matemática]\n- Considerações: [casos especiais]\n```\n\n## Diretrizes de Implementação\n\n### Análise de Código\n\n1. Identifique padrões existentes antes de documentar\n2. Extraia regras implícitas do código\n3. Documente exceções e casos especiais\n4. Mantenha consistência com implementação atual\n\n### Cenários BDD\n\n1. Foque nos fluxos principais de cada feature\n2. Inclua cenários de erro e validação\n3. Use linguagem de negócio, não técnica\n4. Mantenha cenários independentes e testáveis\n\n### Regras de Negócio\n\n1. Organize por domínio/contexto\n2. Use numeração para referência (RN001, RN002)\n3. Inclua exemplos práticos\n4. Documente exceções e casos especiais\n\n### Integrações\n\n1. Documente contratos de API\n2. Inclua exemplos de payload\n3. Mapeie códigos de erro\n4. Defina estratégias de fallback\n\n## Validação e Manutenção\n\n- Mantenha sincronizado com código\n- Atualize conforme evolução do projeto\n- Use como referência para novos desenvolvimentos\n- Integre com processo de code review",
      "howto": "💡 Exemplos de Uso\n\n```\n@amazonq-config-rules-project Configure contexto inteligente do AmazonQ no meu projeto\n```",
      "author": "unknown",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.918Z",
      "updatedAt": "2025-10-04T19:28:38.765Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "general-conventional-commit-messages-2f22f60b",
      "slug": "conventional-commit-messages-2f22f60b",
      "name": "Conventional Commit Messages",
      "description": "Commit you changes to git with a meaningful commit message following conventional commit specification.",
      "tags": ["general", "CLI", "Chat", "Implement"],
      "content": "# Conventional Commit Messages\n\nCommit the staged changes following the conventional commit specification.",
      "howto": "- Make a change in your repository and stage all files with `git add .`.\n- Open your terminal and change directory to the root folder of your repository.\n- Then start Q Developer with `q chat` and paste the prompt.",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.930Z",
      "updatedAt": "2025-10-04T19:28:38.770Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "general-git-commit-message-7f9cf52c",
      "slug": "git-commit-message-7f9cf52c",
      "name": "Git commit message",
      "description": "Writes a git commit message using information about your current git repository and staged changes.",
      "tags": ["general", "Unknown", "CLI", "Chat"],
      "content": "# Git commit message\n\nWrite me a git commit message @git",
      "howto": "Stage all changes using `git add .`. Then call `q chat` and enter the prompt. While generating a response, Q uses your current git context including the staged files to suggest a commit message to you.\n\nSource of this prompt: [Streamline Your Git Commits with Amazon Q Developer CLI](https://www.youtube.com/watch?v=vRiqQqVlsyM)",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.925Z",
      "updatedAt": "2025-10-04T19:28:38.774Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "general-github-pull-requests-38c933f9",
      "slug": "github-pull-requests-38c933f9",
      "name": "Github Pull Requests",
      "description": "Automate the creation of Github pull requests.",
      "tags": ["general", "CLI", "Chat"],
      "content": "# Github Pull Requests\n\nYour task is to assist me in preparing a GitHub pull request for this branch. To complete the task, you must\n\n- Create and analyze the diff of this branch compared to the main branch to understand all changes that were made\n- Read the pull request template of this repository.\n- Write a meaningful pull request description that captures the intention of the change based on the created diff.\n\nYour goal is to create a new pull request on GitHub so that the change can be reviewed.",
      "howto": "- Install the official Github MCP server.\n- Start Q Developer in the CLI.\n- If you have an existing pull request template, add it to the context via \"/context add\".\n- Run the prompt.",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.908Z",
      "updatedAt": "2025-10-04T19:28:38.780Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "general-prompt-to-send-q-cli-chat-to-do-research-on-recent-libraries-for-you-9f8c0709",
      "slug": "prompt-to-send-q-cli-chat-to-do-research-on-recent-libraries-for-you-9f8c0709",
      "name": "Prompt to send Q CLI Chat to do research on recent libraries for you.",
      "description": "Prompt to send Q CLI Chat to do research on recent libraries for you.",
      "tags": ["general", "CLI", "Doc Agent"],
      "content": "# Prompt to send Q CLI Chat to do research on recent libraries for you.\n\nCollect information on the <Library / Framework Name> whose documentation is available here: <URL>.\nUse your execute tool and your knowledge of the unix commands to navigate this website.\nStart by analyzing the structure of the website.\nContinue by researching information about: <List of topics>.\nCollect both code and documentation.\nWrite the result into a markdown file called <filename>.md",
      "howto": "Use this prompt with Amazon Q Developer CLI Chat.\nThen put the file in the context of the CLI using the command: /context add <filename>.md.\nFinally trigger a prompt to develop something given this new context.\nHere is demo blog post on this prompt: https://www.linkedin.com/posts/jeffelandreau_amazonqdeveloper-strands-generativeai-activity-7332856467667992576-A5NK.",
      "author": "JFL",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.910Z",
      "updatedAt": "2025-10-04T19:28:38.786Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "general-read-cline-memory-bank-0983a65b",
      "slug": "read-cline-memory-bank-0983a65b",
      "name": "Read Cline Memory Bank",
      "description": "Before starting a task, you want to make sure that Amazon Q knows about important project documentation generated by cline.",
      "tags": ["general", "IDE", "Chat"],
      "content": "# Read Cline Memory Bank\n\nYou are an expert software engineer with a unique characteristic: your knowledge about this project relies on the project Memory Bank. To understand the project and continue work effectively, you MUST read ALL files in the  \n@folder\n\nThis is not optional.",
      "howto": "Start a new chat with Amazon Q Developer and replace @folder with your memory bank folder. The folder is typically called `memory-bank` located in a project root folder. For more information about the memory-bank feature of cline, follow: https://docs.cline.bot/improving-your-prompting-skills/custom-instructions-library/cline-memory-bank",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.918Z",
      "updatedAt": "2025-10-04T19:28:38.790Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "general-requirement-to-issue-stepfunction-efcb913e",
      "slug": "requirement-to-issue-stepfunction-efcb913e",
      "name": "requirement-to-issue-stepfunction",
      "description": "Requirement from client user to github issue, with step function and lambda ",
      "tags": ["general", "Unknown", "IDE", "Chat"],
      "content": "# requirement-to-issue-stepfunction\n\n@workspace I am working on a lambda function that will be triggered by a s3 put object event. Object put to s3 bucket will be raw requirement from client/user. The lambda function will process the .doc or .pdf files and send to Claude 3.5 sonnect v2 and transfer the requiement document to one or multiple issues that can assign to developers.\n\nThis is good. I would like to use claude 3.5 sonnet v2 in amazon bedrock. converse API is preferred.\n\nThis looks great. Now, I would prefer to achieve exactly same with AWS Step function, use as much direct integration in step function when you invoke other service, e.g., invoke Claude 3.5 sonnet v2 in Amazon Bedrock. I would prefer you provide me a CDK script in typescirpt. I prefer python for Lambda function in the statemachine of step function.\n\nI don't want to use textract. I would prefer give the document to the large language model in Bedrock.\n\nthis is wrong. Here is a sample of invoke bedrock model in stepfunction:\n\n```\nimport * as bedrock from 'aws-cdk-lib/aws-bedrock';\n\nconst model = bedrock.FoundationModel.fromFoundationModelId(\n  this,\n  'Model',\n  bedrock.FoundationModelIdentifier.AMAZON_TITAN_TEXT_G1_EXPRESS_V1,\n);\n\nconst task = new tasks.BedrockInvokeModel(this, 'Prompt Model', {\n  model,\n  body: sfn.TaskInput.fromObject(\n    {\n      inputText: 'Generate a list of five first names.',\n      textGenerationConfig: {\n        maxTokenCount: 100,\n        temperature: 1,\n      },\n    },\n  ),\n  resultSelector: {\n    names: sfn.JsonPath.stringAt('$.Body.results[0].outputText'),\n  },\n});\n```\n\nPlease consider use the same function and method.\n\n2 more issues here:\n\non stateMachine, you use addCatch on sfn.chain.\n\ns3.SfnDestination doesn't exist. To trigger a stepfunction statemachin, you need to use another lambda. s3-> lambda -> StepFunction\n\nGood! Now give me the document reader lambda function\n\ngood. But boto3 is a embedded lib in lambda, you don't need to put to requirement.txt\n\nGood! Now generate github_issue_creator lambda function\n\nagain, request is included in lambda as default, you don't need to add to requirements.txt file\n\nI have below warrnings when I execute cdk ls:\n\n```\n[WARNING] aws-cdk-lib.aws_stepfunctions.MapProps#parameters is deprecated.\nStep Functions has deprecated the parameters field in favor of\nthe new itemSelector field\nThis API will be removed in the next major release.\n[WARNING] aws-cdk-lib.aws_stepfunctions.Map#iterator is deprecated.\nuse itemProcessor instead. This API will be removed in the next major release. [WARNING] aws-cdk-lib.aws_stepfunctions.StateMachineProps#definition is deprecated. use definitionBody: DefinitionBody.fromChainable() This API will be removed in the next major release. [WARNING] aws-cdk-lib.aws_stepfunctions.StateMachineProps#definition is deprecated. use definitionBody: DefinitionBody.fromChainable() This API will be removed in the next major release.\n```\n\nAnd I preferred python version 12 on my lambda functions\n\nThe way you using itemProcessor is wrong. Here is an working sample. Please correct it:\n\n```\nconst map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n  itemSelector: {\n    item: sfn.JsonPath.stringAt('$$.Map.Item.Value'),\n  },\n  resultPath: '$.mapOutput',\n});\n\n// The Map iterator can contain a IChainable, which can be an individual or multiple steps chained together.\n// Below example is with a Choice and Pass step\nconst choice = new sfn.Choice(this, 'Choice');\nconst condition1 = sfn.Condition.stringEquals('$.item.status', 'SUCCESS');\nconst step1 = new sfn.Pass(this, 'Step1');\nconst step2 = new sfn.Pass(this, 'Step2');\nconst finish = new sfn.Pass(this, 'Finish');\n\nconst definition = choice\n    .when(condition1, step1)\n    .otherwise(step2)\n    .afterwards()\n    .next(finish);\n\nmap.itemProcessor(definition);\n```",
      "howto": "",
      "author": "Stan Fan",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.908Z",
      "updatedAt": "2025-10-04T19:28:38.799Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "persona-frontend-engineer-54019c81",
      "slug": "frontend-engineer-54019c81",
      "name": "Frontend Engineer",
      "description": "Frontend React Tailwind Vitests Good practices Senior Developer",
      "tags": ["persona", "Design", "IDE", "Chat"],
      "content": "# Frontend Engineer\n\n/dev\nYou are an AI assistant for a modern React + TypeScript project with a modular architecture. The application follows strict best practices for code organization, testing, and development workflows. Here’s the detailed context:\n\n---\n\n### **Project Structure**:\n\n- `/src/__mocks__`: Mock data and service mocks for testing.\n- `/src/__tests__`: Test configurations and shared utilities.\n- `/src/api`: Handles API configurations with Axios instances, including auth tokens and error handling (401/403 responses).\n- `/src/components`: Reusable UI components, organized by feature.\n- `/src/contexts`: React context providers for state management.\n- `/src/hooks`: Custom React hooks for shared logic.\n- `/src/interfaces`: TypeScript type definitions and interfaces.\n- `/src/pages`: Page-level components and routing logic.\n- `/src/utils`: Utility functions and helpers.\n\n### **Core Tools and Libraries**:\n\n- **React**: 18.3.1\n- **TypeScript**: Latest stable version.\n- **Tailwind CSS**: 3.4.14 (color palette configured in `tailwind.config.ts`).\n- **Ant Design**: ^5.18.0\n- **@ant-design/icons**: ^5.3.4\n- **Day.js**: ^1.11.10\n- **Okta**: Authentication using `@okta/okta-react` (^6.9.0) and `@okta/okta-auth-js` (^7.8.0).\n- **Testing**:\n  - **Vitest**: Unit and integration testing (no Jest).\n  - **@testing-library/react**: User-centric component tests.\n  - **@testing-library/react-hooks**: Testing custom React hooks.\n  - **@testing-library/user-event**: Simulates real user interactions.\n- **Husky**: Pre-push hooks ensure code quality and test coverage.\n\n### **TypeScript Standards:**:\n\n- The use of `any` is strictly prohibited.\n\n### **Code Quality and Testing Standards**:\n\n- **Code Coverage**: >80%.\n- Test user behavior over implementation details.\n- Write meaningful assertions for accessibility and performance.\n- Avoid flaky tests and ensure test independence.\n- Test focus:\n  - Unit tests for components, hooks, utilities, and services.\n  - Integration tests for components, context, and API workflows.\n  - Mock services for API calls, context providers, and browser APIs.\n\n---\n\n### **API and Interceptors**:\n\n- Axios is configured with:\n  - Base URL from environment variables.\n  - Timeout settings.\n  - Authentication token management (access and refresh tokens).\n  - Request interceptors for adding headers and auth tokens.\n  - Response interceptors for error handling (401, 403).\n  - Centralized error handling and user feedback mechanisms.\n\n---\n\n### **Development Best Practices**:\n\n1. Use modular architecture: Follow `paths` mapping (`@/*` points to `./src/*`).\n2. Write reusable components, hooks, or utilities.\n3. Ensure adherence to the library versions listed above.\n4. Tailwind CSS is used for styling—refer to the `tailwind.config.ts` for the color palette.\n5. For UI components, integrate Ant Design components and icons.\n6. Performance and accessibility are key—focus on lazy loading, code splitting, and a responsive design.\n\n---\n\n### **When Assigned a Task**:\n\n- Understand and adapt to the modular structure and tools.\n- Write efficient, maintainable, and well-tested TypeScript code.\n- Always aim for coverage >80% and test functionality (not implementation).\n- Propose performance or accessibility improvements where applicable.\n- Follow the outlined architecture and guidelines strictly.\n\n---\n\n### **Example Tasks**:\n\n1. \"Create a paginated table component with Ant Design using Tailwind for layout.\"\n2. \"Implement API error handling for the user profile page.\"\n3. \"Write unit and integration tests for the `useAuth` hook.\"\n4. \"Improve accessibility and performance of the login form.\"\n5. \"Debug a failing test in `/src/__tests__/hooks/useAuth.test.ts`.\"\n\n---\n\nRespond with clear, actionable steps or solutions tailored to this project’s architecture and dependencies. Propose enhancements if applicable while adhering to these constraints.",
      "howto": "",
      "author": "Juanse Mastrangelo",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.941Z",
      "updatedAt": "2025-10-04T19:28:38.812Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "persona-independent-thought-challenger-4b1e74aa",
      "slug": "independent-thought-challenger-4b1e74aa",
      "name": "Independent Thought Challenger",
      "description": "Transforms Amazon Q into a critical thinking partner that challenges your ideas instead of simply agreeing. The AI questions your assumptions, offers skeptical viewpoints, checks your reasoning for flaws, suggests alternative perspectives, and prioritizes accuracy over agreement. Perfect for refining arguments, avoiding confirmation bias, and developing more robust thinking.",
      "tags": ["persona", "CLI", "Chat", "Enhance"],
      "content": "# Independent Thought Challenger\n\nChallenge my thinking, don't just agree. I want intellectual friction, not echo-chamber validation. When I share ideas:\n\nQuestion the bedrock. What assumptions am I making that deserve scrutiny?\n\nPlay devil's advocate. What would the strongest counterargument look like?\n\nStress-test my logic. Where does my reasoning bend or break?\n\nRotate the lens. How does this idea transform when viewed from unexpected angles?\n\nValue truth over comfort. If my argument falters, point it out clearly and show me the better path.\n\nBe tough but fair. Your purpose isn't to tear down, but to build up through honest critique. Flag my biases and blind spots plainly. Let's sharpen our thinking through productive resistance.",
      "howto": "1. Begin your conversation normally\n2. Use this prompt when you want critical feedback rather than agreement\n3. Present your ideas, theories, or arguments clearly\n4. Expect the AI to challenge your thinking by questioning assumptions, offering skeptical viewpoints, checking your reasoning, and suggesting alternative perspectives\n5. Be open to having your ideas thoroughly examined and critiqued\n6. Use the feedback to refine your thinking and strengthen your arguments",
      "author": "unknown",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.920Z",
      "updatedAt": "2025-10-04T19:28:38.816Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "persona-professional-speaking-coach-feedback-generator-bd566113",
      "slug": "professional-speaking-coach-feedback-generator-bd566113",
      "name": "Professional Speaking Coach Feedback Generator",
      "description": "Transforms Amazon Q into a speaking coach that analyzes presentation videos, providing detailed feedback on delivery, body language, and content structure.\nCreates multiple analysis files including comprehensive feedback, timestamp-specific notes, talk structure outline, and a personalized scorecard based on your experience level. Organizes outputs for easy reference and future analyses.",
      "tags": ["persona", "CLI", "Chat", "Optimize"],
      "content": "# Professional Speaking Coach Feedback Generator\n\nI'm a {job title} with {Number} years relevant experience and just recorded myself giving a talk on {talk title}. Please check if there are any video files of any format in this directory (case insensitive) or ask me to provide the link to a public YouTube video URL. I want you to ask me which file or youtube url to choose by presenting me with a well formatted CLI numbered menu and then you will do the following:\n\nAssume you're a professional speaking coach and you're focused on reviewing my talks and assessing my presentation strengths and growth areas. Please do not give flattering responses, my goal is to improve my talk delivery.\n\nYou'll need to extract the speaking and non-verbal activity using open source software in order to access my sentiment, quality of delivery, overall mood, facial expressions, hand gestures, body language, and related factors that a public speaking speech coach would analyze.\n\nI'm looking for honest, constructive feedback so that I can get better at this.\n\nMake sure all the tools you use are local to my computer -- I don't want to incur any cloud computing charges for this project.\n\nPlease create these separate analysis files:\n\n1. A comprehensive analysis document with general observations and recommendations\n2. A timestamp-focused document highlighting specific moments to target in practice sessions\n3. Structure outline of the talk from the perspective of an audience member listening - include questions and note taking annotations so the speaker knows where there are areas to make clearer. Also attempt to discern what the call to action for the audience.\n4. A scorecard of the talk with a rubric based on what my job title and experience is at the beginning of this prompt. I want points for each section along with a grade overall.\n\nInclude specific timestamps I should focus on, with detailed notes about what issues occur at those timestamps and how to fix them.\n\nPlease use clear naming conventions and subfolder for each talk when needed based on the source filename within it so that I can come back and use this folder for multiple talk recordings over time. Also create an markdown file in the main folder so you know what do to next time I ask this in this directory. Remember if you need to review frame-by-frame thumbnails or have additional dependencies to complete this project, please sort them in clearly marked subfolders so that the the analysis files are what is seen per project -- I don't want to be overwhelmed by too many files at first glance of the output.\n\nAfter everything is complete, you can ask me if I want to process any more talks to start this over again.",
      "howto": "**Prerequisites:**\n\n1. A video recording of your presentation (local file or YouTube URL)\n2. Basic information about your professional background (job title and years of experience)\n3. The title of your talk\n\n**Usage Instructions:**\n\n1. Provide your job title, years of experience, and talk title in the designated placeholders\n2. Have your presentation video ready (either as a local file or a public YouTube URL)\n3. Run the prompt in Amazon Q, which will scan for video files or ask you to provide a YouTube link\n4. Select the video you want analyzed from the presented menu\n5. Amazon Q will generate multiple analysis files organized in a structured folder system\n6. Review the feedback documents to identify areas for improvement\n7. Use the timestamp-specific feedback to focus your practice sessions\n8. The prompt creates a persistent markdown file so you can easily analyze additional presentations in the future\n\nThis prompt is ideal for professionals looking to improve their public speaking skills through detailed, objective feedback without requiring external coaching services.",
      "author": "unknown",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.895Z",
      "updatedAt": "2025-10-04T19:28:38.828Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "persona-pythonexpert-diy-profile-prompt-8d99825e",
      "slug": "pythonexpert-diy-profile-prompt-8d99825e",
      "name": "PYTHONEXPERT - DIY Profile Prompt",
      "description": "Prompt that instructs Q to behave in certain way when I use 'PYTHONEXPERT' keyword",
      "tags": ["persona", "Implement", "IDE", "Chat"],
      "content": "# PYTHONEXPERT - DIY Profile Prompt\n\nConsider yourself as a senior python developer with over 10 years of experience.The code that you'll generate is always optimised and scalable.Whatever function that you write will have the function name ending with '\\_expert'.",
      "howto": "1. Create a \".md\" document and paste the following contents :\n   PYTHONEXPERT\n   Consider yourself as a senior python developer with over 10 years of experience.The code that you'll generate is always optimised and scalable.Whatever function that you write will have the function name ending with '\\_expert'.\n\n2. Use @workspace PYTHONEXPERT {{ your usual prompt }}",
      "author": "Proceyes",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.939Z",
      "updatedAt": "2025-10-04T19:28:38.832Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "persona-senior-react-engineer-2b0aac66",
      "slug": "senior-react-engineer-2b0aac66",
      "name": "Senior React Engineer",
      "description": "Let Amazon Q Developer act as a Senior Engineer with deep experience in a defined area, asking clarifying questions instead of jumping into conclusions. ",
      "tags": ["persona", "Design", "IDE", "Chat"],
      "content": "# Senior React Engineer\n\nYou are acting as a Senior Frontend Engineer with deep experience in\n\n- typescript,\n- the react and next.js framework,\n- domain-driven design, and\n- Amplify Gen2\n\nYour task is to assist me in all frontend-related tasks and questions.\nIf a question, or task is unclear, ask clarifying questions instead of jumping to conclusions.",
      "howto": "",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.909Z",
      "updatedAt": "2025-10-04T19:28:38.838Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "scaffolding-boostrap-flask-app-in-dev-68f5b351",
      "slug": "boostrap-flask-app-in-dev-68f5b351",
      "name": "Boostrap Flask App in /dev",
      "description": "This will generate a consistent output from /dev",
      "tags": ["scaffolding", "Unknown", "IDE", "Dev Agent"],
      "content": "# Boostrap Flask App in /dev\n\n1. Create a folder in your project workspace (I call mine \"project\", the name might be significant, I have not tried others)\n2. In this folder, create a file called \"project-standards.md\"\n3. Add the following markdown into this file\n\n```\nWhen creating new Python code, use the following guidance\n\n- Generate code using the following structure and layout\n\n├── static/\n├── models/\n├── routes/\n├── templates/\n├  app.py\n```\n\n4. Save the file, and then you are good to go",
      "howto": "With this file in your project workspace, code generated by /dev will adopt these norms.",
      "author": "Ricardo Sueiras",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.933Z",
      "updatedAt": "2025-10-04T19:28:38.842Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "scaffolding-github-actions-pull-request-workflow-d748c1c3",
      "slug": "github-actions-pull-request-workflow-d748c1c3",
      "name": "Github Actions pull request workflow",
      "description": "Creates a pull request workflow template for Github Actions",
      "tags": ["scaffolding", "Deploy", "IDE", "Dev Agent"],
      "content": "# Github Actions pull request workflow\n\n/dev Create a GitHub Actions workflow file that runs on pull requests targeting the {{branch-name}} branch. The workflow should:\n\n- Include concurrency controls to cancel outdated workflow runs.\n- Restrict permissions to the minimum required.\n- Add Timeout Limits to prevent hanging jobs.\n- Run on ubuntu-latest.\n- Use the latest stable {{runtime}} version.\n- Implement dependency caching with a specific cache-dependency-path to minimize execution time\n- Combine lint and test into a single 'verify' job to reduce setup overhead.",
      "howto": "",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.909Z",
      "updatedAt": "2025-10-04T19:28:38.845Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "scaffolding-python-lambda-layer-generator-3ad29455",
      "slug": "python-lambda-layer-generator-3ad29455",
      "name": "Python Lambda Layer Generator",
      "description": "Creates a Lambda layer zip file, given a list of Python libraries. Checks for vulnerabilities.",
      "tags": ["scaffolding", "Implement", "IDE", "Dev Agent"],
      "content": "# Python Lambda Layer Generator\n\n/dev Create a html javascript app that automatically generates the required code to build a Python Lambda layer zip file. The app should allow the user to specify the Python version and the libraries to be installed.\n\nFor example, if the Python version is 3.12 and the library specification is `requests==2.32.3`, the code generated from the app should be:\n\n```bash\nmkdir test/\npyenv local 3.12\npyenv which python\n\ncat << EOF > requirements.txt\nrequests==2.32.3\nEOF\n\npython -m venv create_layer\nsource create_layer/bin/activate\npip install -r requirements.txt\nmkdir python\ncp -r create_layer/lib python/\nzip -r requests-py312.zip python\n\n# Cleanup\ndeactivate\nrm -rf create_layer/ python/\n```\n\nThe app should include a text box displaying the generated code with syntax highlighting. There should be a copy to clipboard button as well as a download button. Use shadcn and dark mode. Use a library or API, such as Snyk, to check for library vulnerabilities.",
      "howto": "Open the generated html file in a browser. Enter the required Python libraries and hit the copy to clipboard button. Paste the contents in a terminal window and run it. The code should generate a zip file that you can use as a Python Lambda layer. It is assumed that you have Python and pyenv running on your machine.",
      "author": "Nathaniel Ng",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.898Z",
      "updatedAt": "2025-10-04T18:50:38.898Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "scaffolding-setup-shell-from-zshrc-e38adaf1",
      "slug": "setup-shell-from-zshrc-e38adaf1",
      "name": "Setup shell from .zshrc",
      "description": "Use the CLI to install all your development tools from a .zshrc file. Without it, the manual setup would have taken hours. The CLI completes the task in minutes.",
      "tags": ["scaffolding", "CLI", "Chat"],
      "content": "# Setup shell from .zshrc\n\nI have installed a new system, your task is to configure my shell by installing the tools specified in my .zshrc file.",
      "howto": "",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.941Z",
      "updatedAt": "2025-10-04T19:28:38.850Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "scaffolding-setup-workspace-rules-a2e65a78",
      "slug": "setup-workspace-rules-a2e65a78",
      "name": "Setup Workspace Rules",
      "description": "Amazon Q Developer operates more quickly, more accurately, and consistently when properly configured with information it can load quickly. This prompt instructs Q to learn from your project and create context-efficient files that give Q just what it needs, with references to load-on-demand details based on the interaction.",
      "tags": [
        "scaffolding",
        "IDE",
        "CLI",
        "Optimize",
        "Documentation",
        "Implement",
        "Test",
        "Operate",
        "Plan",
        "Enhance",
        "Requirements",
        "Design",
        "Chat",
        "Test Agent",
        "Doc Agent"
      ],
      "content": "# Setup Workspace Rules\n\n# Amazon Q Workspace Setup\n\nHelp me optimize my development workflow by setting up Amazon Q Developer for this project. I need to create a comprehensive configuration that enables Amazon Q to understand my project's structure, standards, and requirements.\n\n## Configuration Tasks\n\n1. Create an `AmazonQ.md` file at the project root that provides:\n   - Project overview and architecture\n   - Primary development workflows\n   - Key technologies and frameworks\n   - Coding standards and conventions\n\n2. Set up `.amazonq/rules/project/*.md` files for specific guidance on:\n   - Code implementation patterns\n   - Testing strategies and test generation\n   - Documentation requirements\n   - Library/framework usage\n   - Code review standards\n   - Common development scenarios\n   - Architectural decisions\n   - Integration patters\n   - Troubleshooting guides\n\n3. Create a `.amazonq/rule-details/project/` directory which will contain the more detailed content for rules, referenced from .amazonq/rules/project/\\*.md files\n\n4. In scenarios where rule details are extensive, to save context space, save details of the rule in `.amazonq/rule-details/project/` and reference conditionally from rules. For example:\n\n   Sample rule: `.amazonq/rules/project/python_comments.md`\n\n   ```markdown\n   # Python Code Documentation Guide\n\n   When generating comments for python functions and modules, follow the detailed instructions in `.amazonq/rule-details/project/python_documentation_guidelines.md`\n   ```\n\n   Sample rule-detail file: `.amazonq/rule-details/project/python_documentation_guidelines.md`\n\n   ```markdown\n   # Python Code Documentation Standards\n\n   [detailed description of documentation standards]\n   ```\n\n## Implementation Approach\n\nPlease implement this configuration in stages:\n\n1. First, analyze the project structure to understand its scope and complexity\n2. Create the core configuration files with essential guidance\n3. Progressively enhance the configuration as you discover more about the codebase\n4. Ensure all documentation cross-references related files appropriately\n\nIf the project is large, focus on the most critical aspects first and provide a strategy for incrementally improving the configuration over time.\n\n> Note: If the AmazonQ.md file already exists, update it appropriately without losing critical information from the original version. Take an approach that will maximize the efficient use of context for very large projects.\n\nFinally, create a new rule called .amazonq/rules/learn.md in which you instruct Amazon Q Developer to prompt the user if they want to update rules when Amazon Q Developer is corrected by the user. For instance, if Q generated an incorrect directory structure, or if Q generated code that the user indicated was incorrect and provided new direction, ask if you should update the corresponding rule(s).",
      "howto": "Simply run the prompt from the IDE or CLI chat. If you will use with multiple projects, save as a Saved Prompt.",
      "author": "unknown",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.932Z",
      "updatedAt": "2025-10-04T19:28:38.862Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "solutions-aws-architecture-blueprint-for-a-scalable-file-processing-pipeline-36142aff",
      "slug": "aws-architecture-blueprint-for-a-scalable-file-processing-pipeline-36142aff",
      "name": "AWS architecture blueprint for a scalable file-processing pipeline",
      "description": "Create an extendable AWS architecture blueprint for a scalable file-processing pipeline, capable of handling periodic CSV file uploads for processing and notifications",
      "tags": ["solutions", "Design", "IDE", "Dev Agent"],
      "content": "# AWS architecture blueprint for a scalable file-processing pipeline\n\nCreate an extendable AWS architecture blueprint using AWS CDK for a scalable file-processing pipeline, capable of handling periodic CSV file uploads for processing and notifications.\n\nBlueprint Requirements:\n\nArchitecture Components:\n\n- Storage Layer:\n  Use Amazon S3 as the primary storage for incoming files, with configurable event triggers to initiate the pipeline based on file uploads.\n  Variables:\n  {{s3_bucket_name}}: Name of the bucket to store incoming files.\n  {{s3_event_trigger}}: Define event triggers (e.g., 'PUT' events for specific file extensions or prefixes).\n\n- Processing Layer:\n  Create an AWS Lambda function using CDK to parse and process CSV files, with configurable concurrency and timeout settings.\n  Define standard output metadata (e.g., file name, processing timestamp, and status) for easy downstream consumption.\n  Variables:\n  {{lambda_memory}}: Memory allocation for optimal processing.\n  {{lambda_timeout}}: Timeout setting to handle variable file sizes.\n  {{lambda_output_structure}}: Define output metadata format for integration with downstream services.\n\n- Error Handling and Queueing:\n  Implement an SQS queue with a Dead Letter Queue (DLQ) for robust error handling and retries on failed events.\n  Variables:\n  {{sqs_queue_name}}: Name of the primary queue.\n  {{dlq_name}}: Name of the Dead Letter Queue for unprocessed items.\n  {{sqs_retry_limit}}: Maximum retries before moving to the DLQ.\n\n- Notification and Alerting Layer:\n  Set up an SNS topic for notifications on successful or failed processing outcomes, with customizable message formats and topics.\n  Variables:\n  {{sns_topic_name}}: Topic for success/failure notifications.\n  {{sns_message_format}}: Define message structure to include details like file name, processing status, and processing time.\n\n- Extendability and Customization:\n  - Data Store Options: Design for integration with a metadata storage solution, such as DynamoDB or RDS, to track file processing history and results.\n  - Monitoring and Observability: Include CloudWatch metrics and logs with hooks for integrating custom observability tools, allowing expansion for specific monitoring requirements.\n  - Security and Compliance: Use CDK to apply IAM roles and KMS encryption, with options for additional security measures (e.g., network isolation) as needed.\n\n- Documentation:\n  - README: Provide a comprehensive README file with CDK setup instructions, configuration options for each component, and usage examples to guide the customization and deployment of the blueprint.\n\n- Purpose:\n  This CDK-based blueprint provides a flexible foundation for implementing a real-time or batch file-processing pipeline on AWS, allowing for scaling and integration of additional services over time.",
      "howto": "",
      "author": "amatore",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.919Z",
      "updatedAt": "2025-10-04T19:28:38.869Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "solutions-aws-architecture-blueprint-for-an-api-gateway-to-sqs-pattern-8e823250",
      "slug": "aws-architecture-blueprint-for-an-api-gateway-to-sqs-pattern-8e823250",
      "name": "AWS architecture blueprint for an API Gateway to SQS pattern",
      "description": "Create an extendable AWS architecture blueprint using AWS CDK for an asynchronous message processing system based on the API Gateway HTTP to SQS pattern. This blueprint is designed to facilitate a scalable and decoupled system that handles incoming API requests, enqueues them in SQS, and processes them asynchronously with Lambda.",
      "tags": ["solutions", "Design", "IDE", "Dev Agent"],
      "content": "# AWS architecture blueprint for an API Gateway to SQS pattern\n\nBlueprint Requirements:\nArchitecture Components:\n\n- API Gateway Layer:\n  Set up an Amazon API Gateway (HTTP API) endpoint to receive incoming HTTP requests.\n  Configure throttling limits to control API access and prevent overloads.\n  Variables:\n  {{PROJECT_NAME}}: The base name of the project.\n  {{STAGE}}: Environment stage (e.g., dev, prod).\n  {{API_THROTTLING}}: Number of requests per second to control rate limits.\n\n- Queue Layer:\n  Create an SQS queue to hold messages from API requests for asynchronous processing.\n  Configure the queue to use a dead-letter queue (DLQ) for handling unprocessed messages after exceeding retry limits.\n  Variables:\n  {{QUEUE_RETENTION}}: The retention period (in days) for messages in the queue.\n  {{BATCH_SIZE}}: The number of messages to process per batch in Lambda.\n  {{DLQ_RETRIES}}: Maximum retry attempts for failed messages before moving to DLQ.\n  Resource Naming:\n  Queue: Named as {{PROJECT_NAME}}-{{STAGE}}-queue.\n  DLQ: Named as {{PROJECT_NAME}}-{{STAGE}}-dlq.\n\n- Processing Layer:\n  Create a Lambda function to consume messages from the SQS queue and process them.\n  Configure the Lambda function’s concurrency and batch size to optimize message handling.\n  Variables:\n  {{BATCH_SIZE}}: Number of messages processed in a single batch.\n  {{DLQ_RETRIES}}: Number of retry attempts for each message before moving it to the DLQ.\n\n- Error Handling and DLQ:\n  Use a Dead Letter Queue (DLQ) attached to the primary SQS queue for managing failed message processing.\n  Set up retry logic for handling transient errors and automatic redirection to the DLQ if retries are exhausted.\n  Variables:\n  {{DLQ_RETRIES}}: Configurable retry limit for messages before moving to DLQ.\n\n- Configuration Options:\n  Resource Naming Conventions:\n  Stack Name: {{PROJECT_NAME}}-{{STAGE}}-queue-stack\n  Resource Names:\n  Queue: {{PROJECT_NAME}}-{{STAGE}}-queue\n  DLQ: {{PROJECT_NAME}}-{{STAGE}}-dlq\n  API Gateway: {{PROJECT_NAME}}-{{STAGE}}-http-api\n\nConfiguration Parameters:\nQueueRetention: {{QUEUE_RETENTION}} days\nBatchSize: {{BATCH_SIZE}}\nMaxRetries: {{DLQ_RETRIES}}\nThrottling: {{API_THROTTLING}} requests per second\n\n- Extendability and Customization:\n\nSecurity and Compliance:\nUse IAM roles with least privilege for API Gateway, Lambda, and SQS.\nAdd KMS encryption for both SQS and DLQ for data security.\nEnable VPC support if needed for Lambda and other network resources for enhanced isolation and compliance requirements.\n\nMonitoring and Observability:\nInclude CloudWatch logging and metrics for monitoring API requests, queue depth, and Lambda execution.\nProvide hooks to integrate custom observability tools for detailed tracing and monitoring requirements.\n\n- Documentation:\n  README:\n  Include a comprehensive README file with instructions for setting up the CDK environment, configuring each component, and usage examples for deploying the stack.\n\n- Purpose:\n  This CDK-based blueprint provides a flexible foundation for implementing an asynchronous API-driven processing pattern on AWS, allowing for future scaling, custom processing logic, and integration with additional services as requirements evolve.",
      "howto": "",
      "author": "amatore",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.916Z",
      "updatedAt": "2025-10-04T19:28:38.874Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "solutions-build-a-ui-for-a-votingapp-44aee1cf",
      "slug": "build-a-ui-for-a-votingapp-44aee1cf",
      "name": "Build a UI for a votingapp",
      "description": "This prompt allows for creating a complete Flask-based user interface from scratch on top of this application that only exposes APIs (https://github.com/aws-containers/votingapp). I often use this for demoing Amazon Q Developer capabilities but hopefully can inspire for other type of real usage.",
      "tags": ["solutions", "Enhance", "IDE", "Dev Agent"],
      "content": "# Build a UI for a votingapp\n\n/dev Create a new Flask route in a dedicated web page at the following path: \"/votes\". This page should be password protected. The page will show a table (in a grid format) with the four restaurants and the vote for each restaurant. The page will also allow a user to vote for the restaurant of their choosing. This page should be modern, rich and following all the latest standards of web user interface developments.",
      "howto": "The prerequisite would be to create the infrastructure to run the application locally. There is a script [here](https://github.com/aws-containers/votingapp/blob/master/preparation/prepare.sh) that allows to do that. You can then run the Python application in your IDE (which requires proper IAM permissions to have the app connect to DynamoDB etc.). It's a bit of work to setup initially but for me the ROI is worth because I use this app frequently to experiment with Q. I often use this for demoing Amazon Q Developer capabilities but hopefully can inspire for other type of real usage.",
      "author": "mreferre",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.895Z",
      "updatedAt": "2025-10-04T19:28:38.878Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "solutions-copy-data-from-dynamodb-across-accounts-aa3a0ec0",
      "slug": "copy-data-from-dynamodb-across-accounts-aa3a0ec0",
      "name": "Copy data from DynamoDB across accounts",
      "description": "This prompt creates a shell script to copy data from a target DynamoDB table to a source table.",
      "tags": ["solutions", "CLI", "Chat", "Implement"],
      "content": "# Copy data from DynamoDB across accounts\n\nCreate a shell script to copy all data from a source DynamoDB table into a target DynamoDB table using the AWS CLI. Source and target tables are provisioned in different AWS accounts.\n\n- Use named profiles called \"source\" and \"target\" to connect to the target and source account.\n- Save scan results to a temporary directory\n- Processing each item individually",
      "howto": "Open Amazon Q Developer in the CLI via `q chat`. Copy-paste the prompt into your terminal. To improve the accuracy of the output, provide samples of how the data are structured inside your DynamoDB Tables.\n\nBefore running the script, make sure to create two named profiles for source and target accounts in your AWS CLI configuration.",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.897Z",
      "updatedAt": "2025-10-04T19:28:38.883Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "solutions-qr-code-to-url-1a3e9ec9",
      "slug": "qr-code-to-url-1a3e9ec9",
      "name": "QR code to URL",
      "description": "Take the QR code from the clipboard and convert it to a URL.",
      "tags": ["solutions", "Implement", "IDE", "Dev Agent"],
      "content": "# QR code to URL\n\n/dev Create a Javascript app that takes a QR code from the clipboard and converts it to a URL. Use a library or API if needed. Use dark mode. Add buttons to open the URL and to copy the URL to clipboard.",
      "howto": "",
      "author": "Nathaniel Ng",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.906Z",
      "updatedAt": "2025-10-04T19:28:38.888Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "spec-driven-development-implementation-plan-18ecdf89",
      "slug": "implementation-plan-18ecdf89",
      "name": "Implementation Plan",
      "description": "Let Amazon Q create an implementation plan as a sequence of prompts that can be executed to implement a feature or task.",
      "tags": [
        "spec-driven-development",
        "CLI",
        "Chat",
        "Design",
        "Documentation",
        "IDE"
      ],
      "content": "# Implementation Plan\n\nYou are acting as an experienced software engineer. Your task is to create a detailed, step-by-step implementation plan. To complete the task you must\n\n- read ALL files in the .amazonq/rules folder to understand guidelines and standards associated to this project.\n- read ALL files in the project-intelligence folder to understand the the project and the associated problem domain.\n- read the feature specification.\n- define a solid implementation plan.\n- break it down into small, iterative chunks that build on each other.\n- review the results and make sure that the steps are small enough to be implemented safely with strong testing, but big enough to move the project forward.\n- iterate until you think that the steps are right-sized for this project.\n\nYour goal is to create a series of prompts for a code-generation LLM that will implement each step in a test-driven manner. The prompts should be structured using the RISEN framework. Use the following prompt template for each prompt:\n\nYou are acting as [insert the role you want AI to take]. Your task is to [insert the main task you want AI to complete]. To complete the task you must: [Insert numbered list of steps to follow]\nYour goal is to [Insert a description of the primary goal]\nConstraints: [Add numbered list of contraints, rules and narrowing factors]\n\nSave the implementation plan as `prompt_plan.md` next to the feature specification file.\n\nFor each prompt ensure, that it contains a step to read all files in the .amazonq/rules folder to understand the guidelines and standards.\nFor each prompt ensure, that it contains a step to verify the implementation by running unit tests.\nFor each prompt ensure, that it contains a constraint to strictly adhere to the scope as described in the steps to complete a given tasks.\nMake sure that each prompt builds on the previous prompts.\nFormat each prompt as plaintext codeblock.\nUse markdown.",
      "howto": "1. Open a new chat inside your IDE\n2. Add the path to your specification file to the context, e.g. `/context add specs/myspec.md`\n3. Add the path to your docs folder to the context, e.g. `/context add docs/*`\n4. Copy-pase the prompt into your chat and run it",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.925Z",
      "updatedAt": "2025-10-04T19:28:38.894Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "spec-driven-development-specifications-for-development-tasks-24b69aa8",
      "slug": "specifications-for-development-tasks-24b69aa8",
      "name": "Specifications for development tasks",
      "description": "Use Amazon Q Developer to assist you in creating a step-by-step specification for a feature idea.",
      "tags": [
        "spec-driven-development",
        "IDE",
        "Chat",
        "Design",
        "Documentation",
        "Requirements",
        "Plan"
      ],
      "content": "# Specifications for development tasks\n\nYou are acting as an experienced software engineer and technical writer. Your task is to assist me in creating a technical specification document for a feature idea. To complete the task, you must\n\n- Read ALL files in the .amazonq/rules folder to understand the guidelines and standards associated with this project.\n- Read ALL files in the project-intelligence folder to understand the project and the associated problem domain.\n- Keep asking relevant questions until you have gathered all relevant information and requirements.\n- Compile your findings into a comprehensive, developer-ready technical specification.\n\nYour goal is to write a developer-ready technical specification I can hand off to a developer.\n\nThere are 11 essential parts the technical specification must contain. If a section is not applicable, keep the section in the specification and write why it is not applicable.\n\n1. Summary: Brief overview of the feature, the user problem it solves, and the proposed solution in a few sentences. It must be written so that any stakeholder can quickly understand the feature’s purpose and value. Sets the context for the rest of the specification\n2. Goals: What the feature wants to achieve (goals) and what is explicitly out of scope (non-goals).\n3. User-Stories / Use Cases: User-centric descriptions of how the feature will be used, often in the format: “As a [user], I want [feature], so that [benefit]”. Ensures the feature is grounded in real user needs and scenarios.\n4. Functional Requirements: A Detailed list of feature requirements, including expected behaviors, inputs, outputs, and edge cases. Details what the feature must do, including edge cases and error handling. Should be testable and unambiguous to guide development and QA.\n5. Non-functional Requirements: Performance, security, privacy, accessibility, and other quality attributes relevant to the feature. Addresses how the feature should perform rather than what it should do.\n6. Solution Design: Technical details of the implementation. Includes architecture diagrams, data flows, data models, APIs, UI/UX changes, and the rationale for design decisions. May reference relevant technical standards, protocols, or frameworks used. Focus on describing how the solution addresses the defined problems instead of showing implementation details. Use pseudocode instead of concrete implementations. Use mermaid syntax to visualize data flows as flow charts, data models as entity-relationship diagrams, or processes as sequence diagrams.\n7. Dependencies and Constraints: Identifies any technical, business, or external dependencies and constraints that impact the feature. Dependencies can be other systems, teams, or features the implementation relies on. Constraints mean limitations such as legacy systems, regulatory requirements, or resource restrictions.\n8. Risks and Mitigations: Document known risks, potential issues, and proposed mitigation strategies. Helps teams proactively address challenges and avoid project delays or failures.\n9. Testing & Acceptance Criteria: Defines how the feature will be validated and what constitutes completion. Includes test plans, specific test cases, and clear acceptance criteria to ensure the feature meets requirements and is ready for release.\n10. Impact Assessment: Briefly describe the impact on users, systems, and stakeholders, including cost/benefit where relevant. May include cost/benefit analysis, user experience implications, or effects on other features or services.\n11. Open Questions: List of unresolved issues or decisions that need further input. Keeps track of what still needs clarification and prompts timely stakeholder engagement.",
      "howto": "1. Setup your project intelligence using the project rule as described here: https://www.promptz.dev/rules/rule/project-intelligence-dbd52e23\n2. Open a new chat inside your IDE\n3. Copy-pase the prompt into your chat\n4. Answer all questions as detailed and specific as possible\n5. Review and update the generated specification\n6. Once finalized, ask Q to save the specification as markdown file. You can choose to add it as additional files in your existing documentation folder or in a separate specs folder. I recommend grouping the specs separated by feature (e.g. specs/featureA/spec.md, specs/featureB/spec.md)",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.932Z",
      "updatedAt": "2025-10-04T19:28:38.900Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "testing-add-unit-test-5ddfde3c",
      "slug": "add-unit-test-5ddfde3c",
      "name": "Add unit test",
      "description": "Adding unit tests for the code in the page",
      "tags": ["testing", "Test", "IDE", "Chat"],
      "content": "# Add unit test\n\nAdd unit test for the code in this file. Use this framework { framework}.",
      "howto": "",
      "author": "Depa",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.917Z",
      "updatedAt": "2025-10-04T19:28:38.907Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "testing-cdk-snapshot-tests-for-typescript-and-jest-37ad5b71",
      "slug": "cdk-snapshot-tests-for-typescript-and-jest-37ad5b71",
      "name": "CDK Snapshot Tests for Typescript and jest",
      "description": "Uses the dev agent to create CDK snapshot tests following best practices and testing guidelines.",
      "tags": ["testing", "Test", "CDK"],
      "content": "# CDK Snapshot Tests for Typescript and jest\n\nAdd CDK snapshot tests to compare the entire synthesized CloudFormation template.\n\nWhen creating snapshot tests, follow these principles:\n\n- use snapshot tests to catch unexpected changes in the overall infrastructure.\n- consider snapshot tests as a change detection mechanism rather than a regression testing tool.\n- ensure that the snapshot test covers CDK stacks, not individual L3 constructs.\n- if applicable, mock CDK assets like docker images or lambda function to prevent generating zip files during test execution. This speeds up test execution and ensures static keys for assets so that snapshots do not change on every execution.\n\nThe snapshot test should conform to the following guidelines:\n\n- use jest as the test framework\n- add comments to explain what every test is covering\n- use a meaningful name of the test\n- do not add extra `describe` blocks.\n- use the `test()` method to run an individual test\n- do not import `describe`, `test`, `jest` or `expect`.\n- use the `aws-cdk-lib.assertions library` from CDK v2 for assertions\n- use single named imports\n- use arrow functions for all `test` functions.\n- the test file must be named like the source ending with .test.ts. Example: if the source file is named `my-stack.ts`, the test file must be named `my-stack.test.ts`",
      "howto": "",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.929Z",
      "updatedAt": "2025-10-04T18:59:28.151Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "testing-cdk-unit-tests-for-typescript-and-jest-1ad0b831",
      "slug": "cdk-unit-tests-for-typescript-and-jest-1ad0b831",
      "name": "CDK unit tests for Typescript and jest",
      "description": "Testing constructs with fine-grained assertions focussing on covering relevant business logic, integration aspects and guardrails.",
      "tags": ["testing", "Test", "CDK"],
      "content": "# CDK unit tests for Typescript and jest\n\nAdd unit tests for CDK L3 construct in this repository.\n\nWhen creating unit tests using fine-grained assertions, follow these principles:\n\n- Verify security configurations and business requirements.\n- Test boundary conditions and error cases in construct properties.\n- Verify that required resources are created and properly linked.\n- Verify that required resources contain the right IAM permissions.\n- Focus unit tests on specific behaviors that must not change.\n- if applicable, mock CDK assets like docker images or lambda function to prevent generating zip files during test execution. This speeds up test execution.\n- each test should only test a single specific aspect of the construct.\n- Ensure that the unit test cover constructs and not stacks.\n\nThe unit test should conform to the following guidelines:\n\n- use jest as the test framework\n- add comments to explain what every test is covering\n- use a meaningful name of the test\n- do not add extra `describe` blocks.\n- use the `test()` method to run an individual test\n- do not import `describe`, `test`, `jest` or `expect`.\n- use the `aws-cdk-lib.assertions` library from CDK v2 for assertions\n- use single named imports\n- use arrow functions for all test functions.\n- the test file must be named like the source ending with `.test.ts`. Example: if the source file is named `api-construct.ts`, the test file must be named `api-construct.test.ts`",
      "howto": "",
      "author": "cremich",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.896Z",
      "updatedAt": "2025-10-04T19:01:31.218Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "testing-generate-rest-api-fixtures-for-cypress-testing-64c20a8c",
      "slug": "generate-rest-api-fixtures-for-cypress-testing-64c20a8c",
      "name": "generate REST API fixtures for cypress testing",
      "description": "To generate permutations of data using a sample response. This specific example has an array of a complex object type in its response",
      "tags": ["testing", "Test", "IDE", "Chat"],
      "content": "# generate REST API fixtures for cypress testing\n\nAn API endpoint returns the following JSON response as an array of elements. The below represents a singular element.\n\n//provide the JSON element here\n\nUsing this information please generate a cypress fixture to mock this response to generate up to 7 such records. Feel free to randomize or negate certain key attributes in the JSON response. Note the below rules for specific element:\n\n<Provide details of keys which can only have certain values, example department can only be \"HR\", \"IT\" or \"Finance\">",
      "howto": "",
      "author": "Nihit Kasabwala",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.911Z",
      "updatedAt": "2025-10-04T19:28:38.933Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "testing-generate-ui-functional-test-using-cypress-for-a-specific-page-2cfe20d8",
      "slug": "generate-ui-functional-test-using-cypress-for-a-specific-page-2cfe20d8",
      "name": "Generate UI functional test using cypress for a specific page.",
      "description": "generate functional test for a UI page that is built using a react framework",
      "tags": ["testing", "Test", "IDE", "Chat"],
      "content": "# Generate UI functional test using cypress for a specific page.\n\nReview the ui component at @workspace/<location of the component file .tsx or .jsx> and generate cypress based functional test. To mock the response from /<api-name> GET call use the fixture defined in @workspace/location of the fixture. The cyrpress.config.ts is already defined in @workspace/<location of the cypress.config.ts file>. This new functional test should be written to <name of the file> in the @workspace/<folder name> folder. If there are any environment variables to written to the cypress config file, please list them separately. If you need `data-testid` to reference any component in the `cy.get` selectors, please provide those recommendations, do not assume they exist.",
      "howto": "At this point, you already have a fixture defined and initial scaffolding for the functional test setup which includes installing cypress.io (`npm install cypress`) and the `cypress.config.ts` is already created in the project folder.",
      "author": "Nihit Kasabwala",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.919Z",
      "updatedAt": "2025-10-04T18:50:38.919Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "testing-parameterize-like-a-pro-generating-junit-5-tests-d819b79b",
      "slug": "parameterize-like-a-pro-generating-junit-5-tests-d819b79b",
      "name": "Parameterize Like a Pro: Generating JUnit 5 Tests",
      "description": "Generate comprehensive JUnit 5 tests for the selected Java code/function/class using best practices and design patterns.",
      "tags": ["testing", "IDE", "CLI", "Chat", "Dev Agent", "Test"],
      "content": "# Parameterize Like a Pro: Generating JUnit 5 Tests\"\n\nGenerate comprehensive JUnit 5 tests for the selected Java code/function/class using best practices and design patterns.\n\nKey requirements:\n\n1. Test Structure\n\n- Use @DisplayName for clear test descriptions\n- Implement @Nested classes for logical test grouping\n- Follow AAA pattern (Arrange-Act-Assert)\n- Include edge cases and boundary conditions\n\n2. Test Coverage Requirements\n\n- Happy path scenarios\n- Error/exception scenarios\n- Null/empty input handling\n- Boundary value analysis\n- Invalid input validation\n- Concurrency scenarios (if applicable)\n\n3. Parameterization Guidelines\n\n- Use @ParameterizedTest for similar test cases\n- Implement @CsvSource for simple data inputs\n- Use @MethodSource for complex test data\n- Include @ValueSource where applicable\n\n4. Mocking Strategy\n\n- Define mock behavior for dependencies\n- Use @Mock and @InjectMocks appropriately\n- Handle external service dependencies\n\n5. Test Data Management\n\n- Create test data factories/builders\n- Implement @BeforeEach/@AfterEach for setup/cleanup\n- Use meaningful test data that reflects real scenarios",
      "howto": "",
      "author": "Vinay Nadig",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.910Z",
      "updatedAt": "2025-10-04T19:28:38.949Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "testing-parameterize-like-a-pro-supercharge-your-junit-5-tests-5fb781ea",
      "slug": "parameterize-like-a-pro-supercharge-your-junit-5-tests-5fb781ea",
      "name": "Parameterize Like a Pro: Supercharge Your JUnit 5 Tests!",
      "description": "Add comprehensive JUnit5 Parameterized Tests",
      "tags": ["testing", "Test", "IDE", "Chat"],
      "content": "# Parameterize Like a Pro: Supercharge Your JUnit 5 Tests!\n\nCraft powerful JUnit 5 parameterized tests that'll make my code bulletproof! Show me how to use @ParameterizedTest, @ValueSource, and @CsvSource to create flexible, data-driven test cases that'll catch edge cases and boost my test coverage. Bonus points for demonstrating custom ArgumentsProvider implementations!",
      "howto": "Open the Java class file for which unit tests in IntelliJ Idea and use the prompt to generate tests.",
      "author": "Vinay Nadig",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.917Z",
      "updatedAt": "2025-10-04T18:50:38.917Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "testing-tdd-fishing-game-prompt-4828e648",
      "slug": "tdd-fishing-game-prompt-4828e648",
      "name": "TDD-fishing-game-prompt",
      "description": "prompt bank for fishing-game demo ",
      "tags": ["testing", "Unknown", "IDE", "Dev Agent"],
      "content": "# TDD-fishing-game-prompt\n\n/dev Generate an ASCII fishing game, include feature:\n\n1. cast_line\n2. catch_fish\n3. display_game\n\nadd a catch_shark method. When player caught a shark, minus 1 score. Generate test file first.\n\nGenerate a test case that player's score cannot go below 0\n\nGenerate a integration test of retriving highest scroe from dynamoDB with moto lib\n\nwrite me a test case only, without touching source code, test on cathing an invalid fish, e.g. bass\n\nNow generate the source code for me on test_catch_invalid_fish test case",
      "howto": "",
      "author": "Stan Fan",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.917Z",
      "updatedAt": "2025-10-04T19:28:38.960Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "testing-test-966e89f8",
      "slug": "test-966e89f8",
      "name": "Test",
      "description": "Test test test",
      "tags": ["testing", "Unknown", "IDE", "Dev Agent"],
      "content": "# Test\n\n/dev This package have integration tests for beta and gamma stages. Ananlyze the complete code and tell me in which file integration tests are set to beta and gamma. For example, I want to move the integration tests from gamma to prod, how to do that.",
      "howto": "",
      "author": "Pankaj Prajapati",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.940Z",
      "updatedAt": "2025-10-04T19:28:38.965Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    },
    {
      "id": "testing-unit-test-generation-b2a80311",
      "slug": "unit-test-generation-b2a80311",
      "name": "Unit test generation",
      "description": "Looking at your code and find new areas that needs to be tested",
      "tags": ["testing", "IDE", "CLI", "Chat", "Test"],
      "content": "# Unit test generation\n\nPlease review this code, and write out a list of missing test cases, and code tests that should exist. The list will be given to a developer, so they should be in a format that is compatible with gitlab issues. and write them down to test.md",
      "howto": "This can be executed from the CLI or from the chat window, you can instruct Amazon Q Developer CLI to write them directly to test.md by adding: \"and write them down to test.md\"\nYou can run this commands multiple times and will create more unit tests, I also recommend adding this to your @prompts.",
      "author": "mjkubba",
      "sourceURL": "",
      "scope": "PUBLIC",
      "createdAt": "2025-10-04T18:50:38.916Z",
      "updatedAt": "2025-10-04T19:28:38.970Z",
      "copyCount": 0,
      "downloadCount": 0,
      "starCount": 0,
      "popularityScore": 0
    }
  ],
  "metadata": {
    "totalCount": 66,
    "lastBuildTime": "2025-10-04T21:56:15.052Z"
  }
}
